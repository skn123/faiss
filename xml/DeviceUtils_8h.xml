<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="DeviceUtils_8h" kind="file" language="C++">
    <compoundname>DeviceUtils.h</compoundname>
    <includes local="no">cublas_v2.h</includes>
    <includes local="no">cuda_runtime.h</includes>
    <includes refid="FaissAssert_8h" local="no">faiss/impl/FaissAssert.h</includes>
    <includes local="no">vector</includes>
    <includedby refid="StandardGpuResources_8h" local="no">faiss/gpu/StandardGpuResources.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>faiss/gpu/utils/DeviceUtils.h</label>
        <link refid="DeviceUtils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>faiss/impl/FaissAssert.h</label>
        <link refid="FaissAssert_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>faiss/impl/FaissException.h</label>
        <link refid="FaissException_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>faiss/impl/platform_macros.h</label>
        <link refid="platform__macros_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>cstdint</label>
      </node>
      <node id="12">
        <label>cstdio</label>
      </node>
      <node id="13">
        <label>cstdlib</label>
      </node>
      <node id="2">
        <label>cublas_v2.h</label>
      </node>
      <node id="3">
        <label>cuda_runtime.h</label>
      </node>
      <node id="6">
        <label>exception</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="8">
        <label>utility</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>faiss/gpu/StandardGpuResources.h</label>
        <link refid="StandardGpuResources_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>faiss/gpu/perf/IndexWrapper.h</label>
        <link refid="IndexWrapper_8h_source"/>
      </node>
      <node id="1">
        <label>faiss/gpu/utils/DeviceUtils.h</label>
        <link refid="DeviceUtils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classfaiss_1_1gpu_1_1DeviceScope" prot="public">faiss::gpu::DeviceScope</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1CublasHandleScope" prot="public">faiss::gpu::CublasHandleScope</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1CudaEvent" prot="public">faiss::gpu::CudaEvent</innerclass>
    <innernamespace refid="namespacefaiss">faiss</innernamespace>
    <innernamespace refid="namespacefaiss_1_1gpu">faiss::gpu</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="DeviceUtils_8h_1a138cee0b36cbee13b75739fe4b96c790" prot="public" static="no">
        <name>CUDA_VERIFY</name>
        <param><defname>X</defname></param>
        <initializer>    do {                                    \
        auto err__ = (X);                   \
        FAISS_ASSERT_FMT(                   \
                err__ == cudaSuccess,       \
                &quot;CUDA error %d %s&quot;,         \
                (int)err__,                 \
                cudaGetErrorString(err__)); \
    } while (0)</initializer>
        <briefdescription>
<para>Wrapper to test return status of CUDA functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="143" column="9" bodyfile="faiss/gpu/utils/DeviceUtils.h" bodystart="143" bodyend="151"/>
      </memberdef>
      <memberdef kind="define" id="DeviceUtils_8h_1a5c840d06d8e05735ee2902b93ab62512" prot="public" static="no">
        <name>CUDA_TEST_ERROR</name>
        <param></param>
        <initializer>    do {                                 \
        CUDA_VERIFY(cudaGetLastError()); \
    } while (0)</initializer>
        <briefdescription>
<para>Wrapper to synchronously probe for CUDA errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="162" column="10" bodyfile="faiss/gpu/utils/DeviceUtils.h" bodystart="162" bodyend="165"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Meta<sp/>Platforms,<sp/>Inc.<sp/>and<sp/>affiliates.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cublas_v2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cuda_runtime.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;faiss/impl/FaissAssert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefaiss" kindref="compound">faiss</ref><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gpu<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment">///<sp/>Returns<sp/>the<sp/>current<sp/>thread-local<sp/>GPU<sp/>device</highlight></codeline>
<codeline lineno="19" refid="namespacefaiss_1_1gpu_1a18ddaf734a629ded5ad2a2f235937298" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1a18ddaf734a629ded5ad2a2f235937298" kindref="member">getCurrentDevice</ref>();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment">///<sp/>Sets<sp/>the<sp/>current<sp/>thread-local<sp/>GPU<sp/>device</highlight></codeline>
<codeline lineno="22" refid="namespacefaiss_1_1gpu_1abf0b5b971122c7c024f70a2e690870ea" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1abf0b5b971122c7c024f70a2e690870ea" kindref="member">setCurrentDevice</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">///<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>available<sp/>GPU<sp/>devices</highlight></codeline>
<codeline lineno="25" refid="namespacefaiss_1_1gpu_1aaeb2757087735aef66e7ec5ba134530a" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1aaeb2757087735aef66e7ec5ba134530a" kindref="member">getNumDevices</ref>();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="27"><highlight class="comment">///<sp/>Starts<sp/>the<sp/>CUDA<sp/>profiler<sp/>(exposed<sp/>via<sp/>SWIG)</highlight></codeline>
<codeline lineno="28" refid="namespacefaiss_1_1gpu_1aaf3d8c41cb926052dcdf4988a323bc3b" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1aaf3d8c41cb926052dcdf4988a323bc3b" kindref="member">profilerStart</ref>();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment">///<sp/>Stops<sp/>the<sp/>CUDA<sp/>profiler<sp/>(exposed<sp/>via<sp/>SWIG)</highlight></codeline>
<codeline lineno="31" refid="namespacefaiss_1_1gpu_1aee97ca97dec791446ce147f0fe68db74" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1aee97ca97dec791446ce147f0fe68db74" kindref="member">profilerStop</ref>();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="33"><highlight class="comment">///<sp/>Synchronizes<sp/>the<sp/>CPU<sp/>against<sp/>all<sp/>devices<sp/>(equivalent<sp/>to</highlight></codeline>
<codeline lineno="34"><highlight class="comment">///<sp/>cudaDeviceSynchronize<sp/>for<sp/>each<sp/>device)</highlight></codeline>
<codeline lineno="35" refid="namespacefaiss_1_1gpu_1a9aa4762fd8451c5f9b67072f4a4880e2" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1a9aa4762fd8451c5f9b67072f4a4880e2" kindref="member">synchronizeAllDevices</ref>();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment">///<sp/>Returns<sp/>a<sp/>cached<sp/>cudaDeviceProp<sp/>for<sp/>the<sp/>given<sp/>device</highlight></codeline>
<codeline lineno="38" refid="namespacefaiss_1_1gpu_1a542b2a71bc3a5e411606a7adca087acc" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cudaDeviceProp&amp;<sp/><ref refid="namespacefaiss_1_1gpu_1a542b2a71bc3a5e411606a7adca087acc" kindref="member">getDeviceProperties</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment">///<sp/>Returns<sp/>the<sp/>cached<sp/>cudaDeviceProp<sp/>for<sp/>the<sp/>current<sp/>device</highlight></codeline>
<codeline lineno="41" refid="namespacefaiss_1_1gpu_1a210fa34b658677ebf264f99fb84ba166" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cudaDeviceProp&amp;<sp/><ref refid="namespacefaiss_1_1gpu_1a210fa34b658677ebf264f99fb84ba166" kindref="member">getCurrentDeviceProperties</ref>();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">///<sp/>Returns<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>threads<sp/>available<sp/>for<sp/>the<sp/>given<sp/>GPU</highlight></codeline>
<codeline lineno="44"><highlight class="comment">///<sp/>device</highlight></codeline>
<codeline lineno="45" refid="namespacefaiss_1_1gpu_1aec530c2ba3468b1edd6e9eceb864e797" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1aec530c2ba3468b1edd6e9eceb864e797" kindref="member">getMaxThreads</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">///<sp/>Equivalent<sp/>to<sp/>getMaxThreads(getCurrentDevice())</highlight></codeline>
<codeline lineno="48" refid="namespacefaiss_1_1gpu_1a7aa4505c9349ef84ae046e7973107366" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1a7aa4505c9349ef84ae046e7973107366" kindref="member">getMaxThreadsCurrentDevice</ref>();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">///<sp/>Returns<sp/>the<sp/>maximum<sp/>grid<sp/>size<sp/>for<sp/>the<sp/>given<sp/>GPU<sp/>device</highlight></codeline>
<codeline lineno="51" refid="namespacefaiss_1_1gpu_1a69e6e5488bcbf6d837070397ccf0edfb" refkind="member"><highlight class="comment"></highlight><highlight class="normal">dim3<sp/><ref refid="namespacefaiss_1_1gpu_1a69e6e5488bcbf6d837070397ccf0edfb" kindref="member">getMaxGrid</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment">///<sp/>Equivalent<sp/>to<sp/>getMaxGrid(getCurrentDevice())</highlight></codeline>
<codeline lineno="54" refid="namespacefaiss_1_1gpu_1a736811b64cc68bb4d0ca5429640dd6b4" refkind="member"><highlight class="comment"></highlight><highlight class="normal">dim3<sp/><ref refid="namespacefaiss_1_1gpu_1a736811b64cc68bb4d0ca5429640dd6b4" kindref="member">getMaxGridCurrentDevice</ref>();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="56"><highlight class="comment">///<sp/>Returns<sp/>the<sp/>maximum<sp/>smem<sp/>available<sp/>for<sp/>the<sp/>given<sp/>GPU<sp/>device</highlight></codeline>
<codeline lineno="57" refid="namespacefaiss_1_1gpu_1ab671a87a6284fc4d2fec44400ca5d163" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1ab671a87a6284fc4d2fec44400ca5d163" kindref="member">getMaxSharedMemPerBlock</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">///<sp/>Equivalent<sp/>to<sp/>getMaxSharedMemPerBlock(getCurrentDevice())</highlight></codeline>
<codeline lineno="60" refid="namespacefaiss_1_1gpu_1accf2b1c27fb6cbd2b384266d42f8c9a3" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1accf2b1c27fb6cbd2b384266d42f8c9a3" kindref="member">getMaxSharedMemPerBlockCurrentDevice</ref>();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment">///<sp/>For<sp/>a<sp/>given<sp/>pointer,<sp/>returns<sp/>whether<sp/>or<sp/>not<sp/>it<sp/>is<sp/>located<sp/>on</highlight></codeline>
<codeline lineno="63"><highlight class="comment">///<sp/>a<sp/>device<sp/>(deviceId<sp/>&gt;=<sp/>0)<sp/>or<sp/>the<sp/>host<sp/>(-1).</highlight></codeline>
<codeline lineno="64" refid="namespacefaiss_1_1gpu_1a90940c17958ddf1b0f5a7f86b556788b" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1a90940c17958ddf1b0f5a7f86b556788b" kindref="member">getDeviceForAddress</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment">///<sp/>Does<sp/>the<sp/>given<sp/>device<sp/>support<sp/>full<sp/>unified<sp/>memory<sp/>sharing<sp/>host</highlight></codeline>
<codeline lineno="67"><highlight class="comment">///<sp/>memory?</highlight></codeline>
<codeline lineno="68" refid="namespacefaiss_1_1gpu_1ae57d0b0e0c7d5529d4aee4cbd432a474" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1ae57d0b0e0c7d5529d4aee4cbd432a474" kindref="member">getFullUnifiedMemSupport</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment">///<sp/>Equivalent<sp/>to<sp/>getFullUnifiedMemSupport(getCurrentDevice())</highlight></codeline>
<codeline lineno="71" refid="namespacefaiss_1_1gpu_1a5b39c8414f2bdc2fbe1ab6f5f21473f8" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1a5b39c8414f2bdc2fbe1ab6f5f21473f8" kindref="member">getFullUnifiedMemSupportCurrentDevice</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment">///<sp/>Does<sp/>the<sp/>given<sp/>device<sp/>support<sp/>tensor<sp/>core<sp/>operations?</highlight></codeline>
<codeline lineno="74" refid="namespacefaiss_1_1gpu_1a5de148f49baef8d80b3dd4a1509bec37" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1a5de148f49baef8d80b3dd4a1509bec37" kindref="member">getTensorCoreSupport</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="76"><highlight class="comment">///<sp/>Equivalent<sp/>to<sp/>getTensorCoreSupport(getCurrentDevice())</highlight></codeline>
<codeline lineno="77" refid="namespacefaiss_1_1gpu_1abf99b9aa3d1433ad0a69e7cccd949817" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1abf99b9aa3d1433ad0a69e7cccd949817" kindref="member">getTensorCoreSupportCurrentDevice</ref>();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="79"><highlight class="comment">///<sp/>Returns<sp/>the<sp/>warp<sp/>size<sp/>of<sp/>the<sp/>given<sp/>GPU<sp/>device</highlight></codeline>
<codeline lineno="80" refid="namespacefaiss_1_1gpu_1a4f1b25409e96c8fee1814a0631470a23" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1a4f1b25409e96c8fee1814a0631470a23" kindref="member">getWarpSize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment">///<sp/>Equivalent<sp/>to<sp/>getWarpSize(getCurrentDevice())</highlight></codeline>
<codeline lineno="83" refid="namespacefaiss_1_1gpu_1a59e67ef6dc543409cc9f981d755df14b" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1a59e67ef6dc543409cc9f981d755df14b" kindref="member">getWarpSizeCurrentDevice</ref>();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment">///<sp/>Returns<sp/>the<sp/>amount<sp/>of<sp/>currently<sp/>available<sp/>memory<sp/>on<sp/>the<sp/>given<sp/>device</highlight></codeline>
<codeline lineno="86" refid="namespacefaiss_1_1gpu_1a202fab8f3a469474cb41064f0f5c8732" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1a202fab8f3a469474cb41064f0f5c8732" kindref="member">getFreeMemory</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment">///<sp/>Equivalent<sp/>to<sp/>getFreeMemory(getCurrentDevice())</highlight></codeline>
<codeline lineno="89" refid="namespacefaiss_1_1gpu_1a5a1d0d4863e18f7c0c154089d57dd61a" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1a5a1d0d4863e18f7c0c154089d57dd61a" kindref="member">getFreeMemoryCurrentDevice</ref>();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment">///<sp/>RAII<sp/>object<sp/>to<sp/>set<sp/>the<sp/>current<sp/>device,<sp/>and<sp/>restore<sp/>the<sp/>previous</highlight></codeline>
<codeline lineno="92"><highlight class="comment">///<sp/>device<sp/>upon<sp/>destruction</highlight></codeline>
<codeline lineno="93" refid="classfaiss_1_1gpu_1_1DeviceScope" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfaiss_1_1gpu_1_1DeviceScope" kindref="compound">DeviceScope</ref><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfaiss_1_1gpu_1_1DeviceScope" kindref="compound">DeviceScope</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfaiss_1_1gpu_1_1DeviceScope" kindref="compound">~DeviceScope</ref>();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prevDevice_;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment">///<sp/>RAII<sp/>object<sp/>to<sp/>manage<sp/>a<sp/>cublasHandle_t</highlight></codeline>
<codeline lineno="103" refid="classfaiss_1_1gpu_1_1CublasHandleScope" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfaiss_1_1gpu_1_1CublasHandleScope" kindref="compound">CublasHandleScope</ref><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfaiss_1_1gpu_1_1CublasHandleScope" kindref="compound">CublasHandleScope</ref>();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfaiss_1_1gpu_1_1CublasHandleScope" kindref="compound">~CublasHandleScope</ref>();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>cublasHandle_t<sp/>get()<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blasHandle_;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>cublasHandle_t<sp/>blasHandle_;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RAII<sp/>object<sp/>to<sp/>manage<sp/>a<sp/>cudaEvent_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="classfaiss_1_1gpu_1_1CudaEvent" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfaiss_1_1gpu_1_1CudaEvent" kindref="compound">CudaEvent</ref><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Creates<sp/>an<sp/>event<sp/>and<sp/>records<sp/>it<sp/>in<sp/>this<sp/>stream</highlight></codeline>
<codeline lineno="120" refid="classfaiss_1_1gpu_1_1CudaEvent_1a53bb2b58bd6ddc1b9b8e317db8eb3e2a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfaiss_1_1gpu_1_1CudaEvent_1a53bb2b58bd6ddc1b9b8e317db8eb3e2a" kindref="member">CudaEvent</ref>(cudaStream_t<sp/>stream,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>timer<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfaiss_1_1gpu_1_1CudaEvent" kindref="compound">CudaEvent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfaiss_1_1gpu_1_1CudaEvent" kindref="compound">CudaEvent</ref>&amp;<sp/>event)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfaiss_1_1gpu_1_1CudaEvent" kindref="compound">CudaEvent</ref>(<ref refid="classfaiss_1_1gpu_1_1CudaEvent" kindref="compound">CudaEvent</ref>&amp;&amp;<sp/>event)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfaiss_1_1gpu_1_1CudaEvent" kindref="compound">~CudaEvent</ref>();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>cudaEvent_t<sp/>get()<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>event_;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Wait<sp/>on<sp/>this<sp/>event<sp/>in<sp/>this<sp/>stream</highlight></codeline>
<codeline lineno="130" refid="classfaiss_1_1gpu_1_1CudaEvent_1ad8968b298b95788c7679d7e5aa0571eb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfaiss_1_1gpu_1_1CudaEvent_1ad8968b298b95788c7679d7e5aa0571eb" kindref="member">streamWaitOnEvent</ref>(cudaStream_t<sp/>stream);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Have<sp/>the<sp/>CPU<sp/>wait<sp/>for<sp/>the<sp/>completion<sp/>of<sp/>this<sp/>event</highlight></codeline>
<codeline lineno="133" refid="classfaiss_1_1gpu_1_1CudaEvent_1a9c85540093aaf87de80ece9f854e7c57" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfaiss_1_1gpu_1_1CudaEvent_1a9c85540093aaf87de80ece9f854e7c57" kindref="member">cpuWaitOnEvent</ref>();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfaiss_1_1gpu_1_1CudaEvent" kindref="compound">CudaEvent</ref>&amp;<sp/>operator=(<ref refid="classfaiss_1_1gpu_1_1CudaEvent" kindref="compound">CudaEvent</ref>&amp;&amp;<sp/>event)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfaiss_1_1gpu_1_1CudaEvent" kindref="compound">CudaEvent</ref>&amp;<sp/>operator=(<ref refid="classfaiss_1_1gpu_1_1CudaEvent" kindref="compound">CudaEvent</ref>&amp;<sp/>event)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEvent_t<sp/>event_;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="142"><highlight class="comment">///<sp/>Wrapper<sp/>to<sp/>test<sp/>return<sp/>status<sp/>of<sp/>CUDA<sp/>functions</highlight></codeline>
<codeline lineno="143"><highlight class="comment"></highlight><highlight class="preprocessor">#define<sp/>CUDA_VERIFY(X)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>err__<sp/>=<sp/>(X);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FAISS_ASSERT_FMT(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err__<sp/>==<sp/>cudaSuccess,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CUDA<sp/>error<sp/>%d<sp/>%s&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int)err__,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaGetErrorString(err__));<sp/>\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment">///<sp/>Wrapper<sp/>to<sp/>synchronously<sp/>probe<sp/>for<sp/>CUDA<sp/>errors</highlight></codeline>
<codeline lineno="154"><highlight class="comment"></highlight><highlight class="comment">//<sp/>#define<sp/>FAISS_GPU_SYNC_ERROR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FAISS_GPU_SYNC_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CUDA_TEST_ERROR()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_VERIFY(cudaDeviceSynchronize());<sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CUDA_TEST_ERROR()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_VERIFY(cudaGetLastError());<sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="168"><highlight class="comment">///<sp/>Call<sp/>for<sp/>a<sp/>collection<sp/>of<sp/>streams<sp/>to<sp/>wait<sp/>on</highlight></codeline>
<codeline lineno="169"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2&gt;</highlight></codeline>
<codeline lineno="170" refid="namespacefaiss_1_1gpu_1a4e6905505fb0c0d1525037408ee0a389" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1a4e6905505fb0c0d1525037408ee0a389" kindref="member">streamWaitBase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>L1&amp;<sp/>listWaiting,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>L2&amp;<sp/>listWaitOn)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>all<sp/>the<sp/>streams<sp/>we<sp/>are<sp/>waiting<sp/>on,<sp/>create<sp/>an<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;cudaEvent_t&gt;<sp/>events;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>stream<sp/>:<sp/>listWaitOn)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaEvent_t<sp/>event;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_VERIFY(cudaEventCreateWithFlags(&amp;event,<sp/>cudaEventDisableTiming));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_VERIFY(cudaEventRecord(event,<sp/>stream));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>events.push_back(event);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>all<sp/>the<sp/>streams<sp/>that<sp/>are<sp/>waiting,<sp/>issue<sp/>a<sp/>wait</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>stream<sp/>:<sp/>listWaiting)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>event<sp/>:<sp/>events)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_VERIFY(cudaStreamWaitEvent(stream,<sp/>event,<sp/>0));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>event<sp/>:<sp/>events)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_VERIFY(cudaEventDestroy(event));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="192"><highlight class="comment">///<sp/>These<sp/>versions<sp/>allow<sp/>usage<sp/>of<sp/>initializer_list<sp/>as<sp/>arguments,<sp/>since</highlight></codeline>
<codeline lineno="193"><highlight class="comment">///<sp/>otherwise<sp/>{...}<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>type</highlight></codeline>
<codeline lineno="194"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L1&gt;</highlight></codeline>
<codeline lineno="195" refid="namespacefaiss_1_1gpu_1a64ae6cf687076b6b0f6a956e42d009c8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1a64ae6cf687076b6b0f6a956e42d009c8" kindref="member">streamWait</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>L1&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;cudaStream_t&gt;&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefaiss_1_1gpu_1a4e6905505fb0c0d1525037408ee0a389" kindref="member">streamWaitBase</ref>(a,<sp/>b);</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L2&gt;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1a64ae6cf687076b6b0f6a956e42d009c8" kindref="member">streamWait</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;cudaStream_t&gt;&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>L2&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefaiss_1_1gpu_1a4e6905505fb0c0d1525037408ee0a389" kindref="member">streamWaitBase</ref>(a,<sp/>b);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1_1gpu_1a64ae6cf687076b6b0f6a956e42d009c8" kindref="member">streamWait</ref>(</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;cudaStream_t&gt;&amp;<sp/>a,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;cudaStream_t&gt;&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefaiss_1_1gpu_1a4e6905505fb0c0d1525037408ee0a389" kindref="member">streamWaitBase</ref>(a,<sp/>b);</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gpu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>faiss</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="faiss/gpu/utils/DeviceUtils.h"/>
  </compounddef>
</doxygen>
